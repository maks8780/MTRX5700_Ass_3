// Generated by gencpp from file landmarks_msg/Landmark_Msg.msg
// DO NOT EDIT!


#ifndef LANDMARKS_MSG_MESSAGE_LANDMARK_MSG_H
#define LANDMARKS_MSG_MESSAGE_LANDMARK_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace landmarks_msg
{
template <class ContainerAllocator>
struct Landmark_Msg_
{
  typedef Landmark_Msg_<ContainerAllocator> Type;

  Landmark_Msg_()
    : label(0)
    , x(0.0)
    , y(0.0)
    , s_x(0.0)
    , s_y(0.0)  {
    }
  Landmark_Msg_(const ContainerAllocator& _alloc)
    : label(0)
    , x(0.0)
    , y(0.0)
    , s_x(0.0)
    , s_y(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _label_type;
  _label_type label;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _s_x_type;
  _s_x_type s_x;

   typedef float _s_y_type;
  _s_y_type s_y;





  typedef boost::shared_ptr< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct Landmark_Msg_

typedef ::landmarks_msg::Landmark_Msg_<std::allocator<void> > Landmark_Msg;

typedef boost::shared_ptr< ::landmarks_msg::Landmark_Msg > Landmark_MsgPtr;
typedef boost::shared_ptr< ::landmarks_msg::Landmark_Msg const> Landmark_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::landmarks_msg::Landmark_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::landmarks_msg::Landmark_Msg_<ContainerAllocator1> & lhs, const ::landmarks_msg::Landmark_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.s_x == rhs.s_x &&
    lhs.s_y == rhs.s_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::landmarks_msg::Landmark_Msg_<ContainerAllocator1> & lhs, const ::landmarks_msg::Landmark_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace landmarks_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37586ccc5f4ed3186510933e2fe487e9";
  }

  static const char* value(const ::landmarks_msg::Landmark_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37586ccc5f4ed318ULL;
  static const uint64_t static_value2 = 0x6510933e2fe487e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "landmarks_msg/Landmark_Msg";
  }

  static const char* value(const ::landmarks_msg::Landmark_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 label\n"
"float32 x\n"
"float32 y\n"
"float32 s_x \n"
"float32 s_y \n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::landmarks_msg::Landmark_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.s_x);
      stream.next(m.s_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landmark_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::landmarks_msg::Landmark_Msg_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.label);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "s_x: ";
    Printer<float>::stream(s, indent + "  ", v.s_x);
    s << indent << "s_y: ";
    Printer<float>::stream(s, indent + "  ", v.s_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANDMARKS_MSG_MESSAGE_LANDMARK_MSG_H
