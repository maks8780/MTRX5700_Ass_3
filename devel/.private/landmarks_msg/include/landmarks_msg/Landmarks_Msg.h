// Generated by gencpp from file landmarks_msg/Landmarks_Msg.msg
// DO NOT EDIT!


#ifndef LANDMARKS_MSG_MESSAGE_LANDMARKS_MSG_H
#define LANDMARKS_MSG_MESSAGE_LANDMARKS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <landmarks_msg/Landmark_Msg.h>

namespace landmarks_msg
{
template <class ContainerAllocator>
struct Landmarks_Msg_
{
  typedef Landmarks_Msg_<ContainerAllocator> Type;

  Landmarks_Msg_()
    : landmarks()  {
    }
  Landmarks_Msg_(const ContainerAllocator& _alloc)
    : landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >::other >  _landmarks_type;
  _landmarks_type landmarks;





  typedef boost::shared_ptr< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct Landmarks_Msg_

typedef ::landmarks_msg::Landmarks_Msg_<std::allocator<void> > Landmarks_Msg;

typedef boost::shared_ptr< ::landmarks_msg::Landmarks_Msg > Landmarks_MsgPtr;
typedef boost::shared_ptr< ::landmarks_msg::Landmarks_Msg const> Landmarks_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator1> & lhs, const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.landmarks == rhs.landmarks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator1> & lhs, const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace landmarks_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "335d6c6a488c5701dc0c2d119f5c2eb2";
  }

  static const char* value(const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x335d6c6a488c5701ULL;
  static const uint64_t static_value2 = 0xdc0c2d119f5c2eb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "landmarks_msg/Landmarks_Msg";
  }

  static const char* value(const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Landmark_Msg[] landmarks\n"
"\n"
"\n"
"================================================================================\n"
"MSG: landmarks_msg/Landmark_Msg\n"
"uint64 label\n"
"float32 x\n"
"float32 y\n"
"float32 s_x \n"
"float32 s_y \n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landmarks_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::landmarks_msg::Landmarks_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::landmarks_msg::Landmarks_Msg_<ContainerAllocator>& v)
  {
    s << indent << "landmarks[]" << std::endl;
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      s << indent << "  landmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::landmarks_msg::Landmark_Msg_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANDMARKS_MSG_MESSAGE_LANDMARKS_MSG_H
